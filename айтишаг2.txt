#include <iostream>
#include <string>
#include <limits>
#include <fstream>
#include <vector>

using namespace std;

const int MAX_STUDENTS = 100;

struct Student
{
    string name;
    string surname;
    int age;
};

// Функция для очистки буфера ввода
void clearInputBuffer() {
    cin.clear();
    cin.ignore(numeric_limits<streamsize>::max(), '\n');
}

// Вывод меню
void showMenu(const vector<Student> &students) {
    cout << "\n=== МЕНЮ УПРАВЛЕНИЯ СТУДЕНТАМИ ===" << endl;
    cout << "1. Заполнить список студентами" << endl;
    cout << "2. Добавить студента" << endl;
    cout << "3. Удалить студента" << endl;
    cout << "4. Изменить данные студента" << endl;
    cout << "5. Показать всех студентов" << endl;
    cout << "6. Записать данные в файл" << endl;
    cout << "7. Прочитать данные из файла" << endl;
    cout << "8. Выход" << endl;
    cout << "Текущее количество студентов: " << students.size() << "/" << MAX_STUDENTS << endl;
    cout << "Выберите действие: ";
}

// Заполнение списка студентами
void inputStudents(vector<Student> &students) {
    if ((int)students.size() >= MAX_STUDENTS) {
        cout << "Список студентов заполнен!" << endl;
        return;
    }

    int count;
    cout << "Сколько студентов вы хотите добавить? (доступно мест: "
         << MAX_STUDENTS - (int)students.size() << "): ";
    if (!(cin >> count)) {
        cout << "Некорректный ввод!" << endl;
        clearInputBuffer();
        return;
    }

    if (count <= 0 || count > MAX_STUDENTS - (int)students.size()) {
        cout << "Некорректное количество!" << endl;
        clearInputBuffer();
        return;
    }

    clearInputBuffer();
    for (int i = 0; i < count; i++) {
        Student s;
        cout << "\nСтудент " << i + 1 << ":" << endl;
        cout << "Имя: ";
        getline(cin, s.name);
        cout << "Фамилия: ";
        getline(cin, s.surname);
        cout << "Возраст: ";
        while (!(cin >> s.age)) {
            cout << "Некорректный возраст. Введите число: ";
            clearInputBuffer();
        }
        clearInputBuffer();
        students.push_back(s);
    }
    cout << "Добавлено " << count << " студентов." << endl;
}

// Добавление студента в список
void addStudent(vector<Student> &students) {
    if ((int)students.size() >= MAX_STUDENTS) {
        cout << "Список студентов заполнен! Невозможно добавить нового студента." << endl;
        return;
    }

    Student s;
    clearInputBuffer();
    cout << "\nДобавление нового студента:" << endl;
    cout << "Имя: ";
    getline(cin, s.name);
    cout << "Фамилия: ";
    getline(cin, s.surname);
    cout << "Возраст: ";
    while (!(cin >> s.age)) {
        cout << "Некорректный возраст. Введите число: ";
        clearInputBuffer();
    }
    clearInputBuffer();

    students.push_back(s);
    cout << "Студент успешно добавлен!" << endl;
}

// Удаление студента из списка
void delStudent(vector<Student> &students) {
    if (students.empty()) {
        cout << "Список студентов пуст!" << endl;
        return;
    }

    // Покажем список
    cout << "\n=== СПИСОК СТУДЕНТОВ ===" << endl;
    for (size_t i = 0; i < students.size(); ++i) {
        cout << i + 1 << ". " << students[i].name << " "
             << students[i].surname << ", возраст: "
             << students[i].age << endl;
    }

    int index;
    cout << "Введите номер студента для удаления (1-" << students.size() << "): ";
    if (!(cin >> index)) {
        cout << "Некорректный ввод!" << endl;
        clearInputBuffer();
        return;
    }

    if (index < 1 || index > (int)students.size()) {
        cout << "Некорректный номер!" << endl;
        return;
    }

    students.erase(students.begin() + (index - 1));
    cout << "Студент успешно удален!" << endl;
}

// Изменение данных о студенте
void changeStudent(vector<Student> &students) {
    if (students.empty()) {
        cout << "Список студентов пуст!" << endl;
        return;
    }

    // Покажем список
    cout << "\n=== СПИСОК СТУДЕНТОВ ===" << endl;
    for (size_t i = 0; i < students.size(); ++i) {
        cout << i + 1 << ". " << students[i].name << " "
             << students[i].surname << ", возраст: "
             << students[i].age << endl;
    }

    int index;
    cout << "Введите номер студента для изменения (1-" << students.size() << "): ";
    if (!(cin >> index)) {
        cout << "Некорректный ввод!" << endl;
        clearInputBuffer();
        return;
    }

    if (index < 1 || index > (int)students.size()) {
        cout << "Некорректный номер!" << endl;
        return;
    }

    Student &student = students[index - 1];

    cout << "\nТекущие данные студента:" << endl;
    cout << "Имя: " << student.name << endl;
    cout << "Фамилия: " << student.surname << endl;
    cout << "Возраст: " << student.age << endl;

    clearInputBuffer();
    cout << "\nВведите новые данные:" << endl;
    cout << "Имя: ";
    getline(cin, student.name);
    cout << "Фамилия: ";
    getline(cin, student.surname);
    cout << "Возраст: ";
    while (!(cin >> student.age)) {
        cout << "Некорректный возраст. Введите число: ";
        clearInputBuffer();
    }
    clearInputBuffer();

    cout << "Данные студента успешно изменены!" << endl;
}

// Вывод содержимого списка на экран
void showStudents(const vector<Student> &students) {
    if (students.empty()) {
        cout << "Список студентов пуст!" << endl;
        return;
    }

    cout << "\n=== СПИСОК СТУДЕНТОВ ===" << endl;
    for (size_t i = 0; i < students.size(); ++i) {
        cout << i + 1 << ". " << students[i].name << " "
             << students[i].surname << ", возраст: "
             << students[i].age << endl;
    }
}

// Запись в файл (перезаписывает файл)
void writeFileStudents(const vector<Student> &students) {
    if (students.empty()) {
        cout << "Нет данных для записи в файл!" << endl;
        return;
    }

    string filename;
    cout << "Введите имя файла для записи: ";
    cin >> filename;

    ofstream file(filename);
    if (!file.is_open()) {
        cout << "Ошибка открытия файла для записи!" << endl;
        return;
    }

    file << students.size() << endl;
    for (const auto &s : students) {
        file << s.name << endl;
        file << s.surname << endl;
        file << s.age << endl;
    }

    file.close();
    cout << "Данные успешно записаны в файл '" << filename << "'" << endl;
}

// Чтение из файла в список (добавляет в существующий список, проверяет лимит)
void readFileStudents(vector<Student> &students) {
    string filename;
    cout << "Введите имя файла для чтения: ";
    cin >> filename;

    ifstream file(filename);
    if (!file.is_open()) {
        cout << "Ошибка открытия файла для чтения!" << endl;
        return;
    }

    int file_student_count;
    if (!(file >> file_student_count)) {
        cout << "Ошибка чтения количества студентов в файле!" << endl;
        file.close();
        return;
    }

    if (file_student_count <= 0 || file_student_count > MAX_STUDENTS) {
        cout << "Некорректное количество студентов в файле!" << endl;
        file.close();
        return;
    }

    if ((int)students.size() + file_student_count > MAX_STUDENTS) {
        cout << "Недостаточно места в списке для загрузки всех студентов из файла!" << endl;
        cout << "Доступно мест: " << MAX_STUDENTS - (int)students.size() << endl;
        file.close();
        return;
    }

    file.ignore(numeric_limits<streamsize>::max(), '\n'); // очистим остаток строки

    int initial_count = students.size();
    for (int i = 0; i < file_student_count; ++i) {
        Student s;
        getline(file, s.name);
        getline(file, s.surname);
        string age_str;
        getline(file, age_str);
        try {
            s.age = stoi(age_str);
        } catch (...) {
            s.age = 0;
        }
        students.push_back(s);
    }

    file.close();
    cout << "Загружено " << (students.size() - initial_count) << " студентов из файла '" << filename << "'" << endl;
}

int main() {
    vector<Student> students;
    students.reserve(MAX_STUDENTS);

    int choice;

    do {
        showMenu(students);
        if (!(cin >> choice)) {
            cout << "Некорректный ввод! Попробуйте снова." << endl;
            clearInputBuffer();
            continue;
        }
        clearInputBuffer();

        switch (choice) {
            case 1:
                inputStudents(students);
                break;
            case 2:
                addStudent(students);
                break;
            case 3:
                delStudent(students);
                break;
            case 4:
                changeStudent(students);
                break;
            case 5:
                showStudents(students);
                break;
            case 6:
                writeFileStudents(students);
                break;
            case 7:
                readFileStudents(students);
                break;
            case 8:
                cout << "Выход из программы..." << endl;
                break;
            default:
                cout << "Некорректный выбор! Попробуйте снова." << endl;
        }
    } while (choice != 8);

    return 0;
