#include <iostream>
#include <windows.h>
#include <algorithm>
#include <string>
#include <limits>
#include <fstream>
#include <vector>

using namespace std;

const int MAX_STUDENTS = 100;

struct Student {
    string name;
    string surname;
    int age;
};

// Очистка буфера ввода
void clearInputBuffer() {
    cin.clear();
    cin.ignore(256, '\n');
}
void sortStudentsBySurname(vector<Student>& students);
bool mysortBySurname(Student student_a, Student student_b);

// Вывод меню
void showMenu(const vector<Student>& students) {
    cout << "\n=== МЕНЮ УПРАВЛЕНИЯ СТУДЕНТАМИ ===" << endl;
    cout << "1. Заполнить список студентов" << endl;
    cout << "2. Добавить студента" << endl;
    cout << "3. Удалить студента" << endl;
    cout << "4. Изменить данные студента" << endl;
    cout << "5. Показать всех студентов" << endl;
    cout << "6. Сохранить данные в файл" << endl;
    cout << "7. Загрузить данные из файла" << endl;
    cout << "8. Зарезервировать файл данных" << endl;
    cout << "9. Сортировка" << endl;
    cout << "10.Exit";
    cout << "Текущее количество студентов: " << students.size() << "/" << MAX_STUDENTS << endl;
    cout << "Выберите действие: ";
}

// Заполнение списка студентами
void inputStudents(vector<Student>& students) {
    if ((int)students.size() >= MAX_STUDENTS) {
        cout << "Список студентов заполнен!" << endl;
        return;
    }

    int count;
    cout << "Сколько студентов вы хотите добавить? (Доступно мест: "
        << MAX_STUDENTS - (int)students.size() << "): ";
    if (!(cin >> count)) {
        cout << "Некорректный ввод!" << endl;
        clearInputBuffer();
        return;
    }

    if (count <= 0 || count > MAX_STUDENTS - (int)students.size()) {
        cout << "Некорректное количество студентов!" << endl;
        clearInputBuffer();
        return;
    }

    clearInputBuffer();
    for (int i = 0; i < count; i++) {
        Student s;
        cout << "\nСтудент " << (i + 1) << ":" << endl;
        cout << "Имя: ";
        getline(cin, s.name);
        cout << "Фамилия: ";
        getline(cin, s.surname);
        cout << "Возраст: ";
        while (!(cin >> s.age)) {
            cout << "Некорректный возраст. Введите число: ";
            clearInputBuffer();
        }
        clearInputBuffer();
        students.push_back(s);
    }

    cout << "Добавлено студентов: " << count << endl;
}

// Добавление одного студента
void addStudent(vector<Student>& students) {
    if ((int)students.size() >= MAX_STUDENTS) {
        cout << "Список студентов заполнен! Невозможно добавить нового студента." << endl;
        return;
    }

    Student s;
    clearInputBuffer();
    cout << "\nДобавление нового студента:" << endl;
    cout << "Имя: ";
    getline(cin, s.name);
    cout << "Фамилия: ";
    getline(cin, s.surname);
    cout << "Возраст: ";
    while (!(cin >> s.age)) {
        cout << "Некорректный возраст. Введите число: ";
        clearInputBuffer();
    }
    clearInputBuffer();

    students.push_back(s);
    cout << "Студент успешно добавлен!" << endl;
}

// Удаление студента
void delStudent(vector<Student>& students) {
    if (students.empty()) {
        cout << "Список студентов пуст!" << endl;
        return;
    }

    cout << "\n=== СПИСОК СТУДЕНТОВ ===" << endl;
    for (size_t i = 0; i < students.size(); ++i) {
        cout << (i + 1) << ". " << students[i].name << " "
            << students[i].surname << ", возраст: " << students[i].age << endl;
    }

    int index;
    cout << "Введите номер студента для удаления (1-" << students.size() << "): ";
    if (!(cin >> index)) {
        cout << "Некорректный ввод!" << endl;
        clearInputBuffer();
        return;
    }

    if (index < 1 || index >(int)students.size()) {
        cout << "Некорректный номер студента!" << endl;
        return;
    }

    students.erase(students.begin() + (index - 1));
    cout << "Студент успешно удалён!" << endl;
}
void sortStudentsBySurname(vector<Student>& vec_of_students)
{

    sort(vec_of_students.begin(), vec_of_students.end(), mysortBySurname);

}
bool mysortBySurname(Student student_a, Student student_b)

{
    return student_a.surname < student_b.surname;



}

// Изменение данных студента
void changeStudent(vector<Student>& students) {
    if (students.empty()) {
        cout << "Список студентов пуст!" << endl;
        return;
    }

    cout << "\n=== СПИСОК СТУДЕНТОВ ===" << endl;
    for (size_t i = 0; i < students.size(); ++i) {
        cout << (i + 1) << ". " << students[i].name << " "
            << students[i].surname << ", возраст: " << students[i].age << endl;
    }

    int index;
    cout << "Введите номер студента для изменения (1-" << students.size() << "): ";
    if (!(cin >> index)) {
        cout << "Некорректный ввод!" << endl;
        clearInputBuffer();
        return;
    }

    if (index < 1 || index >(int)students.size()) {
        cout << "Некорректный номер студента!" << endl;
        return;
    }

    Student& student = students[index - 1];
    cout << "\nТекущие данные:" << endl;
    cout << "Имя: " << student.name << endl;
    cout << "Фамилия: " << student.surname << endl;
    cout << "Возраст: " << student.age << endl;

    clearInputBuffer();
    cout << "\nВведите новые данные:" << endl;
    cout << "Имя: ";
    getline(cin, student.name);
    cout << "Фамилия: ";
    getline(cin, student.surname);
    cout << "Возраст: ";
    while (!(cin >> student.age)) {
        cout << "Некорректный возраст. Введите число: ";
        clearInputBuffer();
    }
    clearInputBuffer();

    cout << "Данные студента успешно изменены!" << endl;
}

// Показ всех студентов
void showStudents(const vector<Student>& students) {
    if (students.empty()) {
        cout << "Список студентов пуст!" << endl;
        return;
    }

    cout << "\n=== СПИСОК СТУДЕНТОВ ===" << endl;
    for (size_t i = 0; i < students.size(); ++i) {
        cout << (i + 1) << ". " << students[i].name << " "
            << students[i].surname << ", возраст: " << students[i].age << endl;
    }
}

// Запись данных в файл
void writeFileStudents(const vector<Student>& students) {
    if (students.empty()) {
        cout << "Нет данных для записи!" << endl;
        return;
    }

    string filename;
    cout << "Введите имя файла для записи: ";
    cin >> filename;

    ofstream file(filename);
    if (!file.is_open()) {
        cout << "Ошибка открытия файла для записи!" << endl;
        return;
    }

    file << students.size() << endl;
    for (const auto& s : students) {
        file << s.name << endl;
        file << s.surname << endl;
        file << s.age << endl;
    }
    file.close();

    cout << "Данные успешно записаны в файл '" << filename << "'" << endl;
}

void readFilestudentsreserv(vector<Student>& students)
{
    students.reserve(MAX_STUDENTS); // резервируем память

    string filename;
    cout << "Enter filename to read from: ";
    cin >> filename;

    ifstream fin(filename);
    if (!fin.is_open()) {
        cout << "Error opening file!" << endl;
        return;
    }

    int count;
    if (!(fin >> count)) {
        cout << "Error reading student count!" << endl;
        fin.close();
        return;
    }

    if (count <= 0 || count > MAX_STUDENTS) {
        cout << "Invalid student count in file!" << endl;
        fin.close();
        return;
    }

    if ((int)students.size() + count > MAX_STUDENTS) {
        cout << "Not enough space to load all students!" << endl;
        cout << "Available slots: " << MAX_STUDENTS - (int)students.size() << endl;
        fin.close();
        return;
    }

    fin.ignore(256, '\n'); // очистка остатка строки

    int initial_size = students.size();
    for (int i = 0; i < count; ++i) {
        Student s;
        getline(fin, s.name);
        getline(fin, s.surname);
        string age_str;
        getline(fin, age_str);
        try {
            s.age = stoi(age_str);
        }
        catch (...) {
            s.age = 0;
        }
        students.push_back(s);
    }

    fin.close();
    cout << "Loaded " << (students.size() - initial_size)
        << " students from file '" << filename << "'" << endl;
}

// Чтение данных из файла
void readFileStudents(vector<Student>& students) {
    string filename;
    cout << "Введите имя файла для чтения: ";
    cin >> filename;

    ifstream file(filename);
    if (!file.is_open()) {
        cout << "Ошибка открытия файла для чтения!" << endl;
        return;
    }

    int file_student_count;
    if (!(file >> file_student_count)) {
        cout << "Ошибка чтения количества студентов!" << endl;
        file.close();
        return;
    }

    if (file_student_count <= 0 || file_student_count > MAX_STUDENTS) {
        cout << "Некорректное количество студентов в файле!" << endl;
        file.close();
        return;
    }

    if ((int)students.size() + file_student_count > MAX_STUDENTS) {
        cout << "Недостаточно места для загрузки всех студентов!" << endl;
        cout << "Доступно мест: " << MAX_STUDENTS - (int)students.size() << endl;
        file.close();
        return;
    }

    file.ignore(256, '\n');

    int initial_count = students.size();
    for (int i = 0; i < file_student_count; ++i) {
        Student s;
        getline(file, s.name);
        getline(file, s.surname);
        string age_str;
        getline(file, age_str);
        try {

            s.age = stoi(age_str);
        }
        catch (...) {
            s.age = 0;
        }
        students.push_back(s);
    }
    file.close();

    cout << "Loaded "
        << (students.size() - initial_count)
        << " students from file '" << filename << "'" << endl;
}

int main() {
    SetConsoleCP(1251);
    SetConsoleOutputCP(1251);
    vector<Student> students;
    students.reserve(MAX_STUDENTS);

    int choice;
    do {
        showMenu(students);
        if (!(cin >> choice)) {
            cout << "Invalid input! Please try again." << endl;
            clearInputBuffer();
            continue;
        }
        clearInputBuffer();

        switch (choice) {
        case 1:
            inputStudents(students);
            break;
        case 2:
            addStudent(students);
            break;
        case 3:
            delStudent(students);
            break;
        case 4:
            changeStudent(students);
            break;
        case 5:
            showStudents(students);
            break;
        case 6:
            writeFileStudents(students);
            break;
        case 7:
            readFileStudents(students);
        case 8:
     
            readFilestudentsreserv(students);
            break;
        case 9:
            sortStudentsBySurname(students);
        case 10:
            cout << "Exiting program..." << endl;
            break;
        default:
            cout << "Invalid choice! Try again." << endl;
        }
    } while (choice != 8);

    return 0;
}
